Simbolos no terminales:
Vn ={ S R op G F H I N M P funcion }

Simbolos Terminales:
Vt = { , '{' '}' '(' ')' num expand reduce post loop fill tune play sin lin sil noi mix con add sub mul div}

Simbolo distinguido:
S = S

Presuponemos sobre el Lexer:
    -  Nos reemplaza las numeros por el token numeros usando la expresion
        regular definida en la regla 'num'.
    -  Nos reemplaza las funciones por sus tokens correspondientes.
    -  Nos elimina todo caracteres que sigue el // hasta el \n, incluyendo las //

Reglas del Lexer:
    #Los numeros los definimos con expresiones regulares
        num -> (+|-| ) [[1..9][0..9]* | 0 ][.[0..9]*[1..9] | .0 | ] 


    #Las funciones definidas con expresiones regulares:
	sin -> sin 						
	lin -> [lin|linear]
	sil -> [sil|silence]
	noi -> [noi|noise]

    #Los operandos definidos con expresiones regulares:
	mix -> & | mix
	con -> ; | con
	add -> + | add 
	sub -> - | sub
	mul -> * | mul
	div -> / | div
    

    #Reduccion del whitespace y Eliminacion de los comentarios    
    E -> [//\w*\n | \s | \n]*


Producciones:

#Del simbolo inicial a una lista de lista generadores con aplicaciones o generadores con aplicaciones unidos por operandos.
S -> {S}N | GNR
R -> lambda | op B 

#Las operaciones pueden ser invocadas con los simbolos o con los nombres completos
op -> mix | con | add | sub | mul | div

#Los generadores pueden ser o numeros u objetos devueltos por funciones
G -> numero | funcion

#Las funciones segun definidas en pagina 2, devuelven objetos
funcion ->  FH
F -> sin | lin | sil | noi 
H -> lambda | ( num I
I -> ,num) | )


#Los metodos de alteracion pueden tener parametros o no, y pueden ser encadenados
N -> lambda | .MN
M -> expand | reduce | post | play P | loop( num ) | fill( num ) | tune( num )
P -> lambda | ( num ) 



